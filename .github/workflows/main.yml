# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
 
name: Java CI with Maven test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    - name: Install Talisman
      run: |
          wget https://github.com/thoughtworks/talisman/releases/latest/download/talisman_linux_amd64 -O talisman
          chmod +x talisman
          sudo mv talisman /usr/local/bin/

 

    - name: Run Talisman Checks
      run: talisman --scan 
      continue-on-error: true

    - name: Upload Report
      uses: actions/upload-artifact@v2
      with:
          name: talisman-scan-report
          path: talisman_report/talisman_reports/data
   
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        #cache: maven
    
    
    - name: Build and test with Maven
      run: mvn -B package --file pom.xml
    - name: Build and analyze
      env:
         # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=poc-maven_maven
    
    - name: Unit Test
      run: mvn -B package --file pom.xml -DskipTests
      
    - run: mkdir staging && cp target/*jar-with-dependencies.jar staging
    
    - uses: actions/upload-artifact@v1
      with:
            name: Package
            path: staging

 
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
    - name: Build Container image
      run: docker build -t ${{ secrets.DOCKER_REPO }}:latest .
    - name: Publish Docker image
      run: docker push ${{ secrets.DOCKER_REPO }}
   
